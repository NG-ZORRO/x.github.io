{"highlightCode":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> computed<span class=\"token punctuation\">,</span> linkedSignal<span class=\"token punctuation\">,</span> signal<span class=\"token punctuation\">,</span> TemplateRef<span class=\"token punctuation\">,</span> viewChild <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NzButtonModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ng-zorro-antd/button'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NzSplitterModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ng-zorro-antd/splitter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NxBubbleModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ng-zorro-x/bubble'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NxThoughtChainModule<span class=\"token punctuation\">,</span> NxThoughtChainItem <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ng-zorro-x/thought-chain'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fromXStream <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ng-zorro-x/x-stream'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> contentChunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'He'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'llo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">', w'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'or'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ld!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mockReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReadableStream <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sseChunks<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> contentChunks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> sseEventPart <span class=\"token operator\">=</span> `event<span class=\"token operator\">:</span> message\\ndata<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"${i}\"</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">\"content\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"${contentChunks[i]}\"</span><span class=\"token punctuation\">}</span>\\n\\n`<span class=\"token punctuation\">;</span>\n    sseChunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>sseEventPart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chunk <span class=\"token keyword\">of</span> sseChunks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'nx-demo-x-stream-default'</span><span class=\"token punctuation\">,</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>NzButtonModule<span class=\"token punctuation\">,</span> NzSplitterModule<span class=\"token punctuation\">,</span> NxBubbleModule<span class=\"token punctuation\">,</span> NxThoughtChainModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token template-string\">template: <span class=\"token html\">`\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-splitter</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-splitter-panel</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">nz-button</span> <span class=\"token attr-name\">nzType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>readStream()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Mock Default Protocol - SSE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        @if (lines().length) {\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nx-bubble</span> <span class=\"token attr-name\">[nxContent]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content()<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[nxTyping]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        }\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-splitter-panel</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-splitter-panel</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nx-thought-chain</span> <span class=\"token attr-name\">[style.margin-inline-start.px]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[nxItems]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>items()<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-splitter-panel</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-splitter</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-template</span> <span class=\"token attr-name\">#thoughtChainCard</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span><span class=\"token punctuation\">></span></span>\n        @for(line of lines(); track line) {\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>code</span><span class=\"token punctuation\">></span></span>{{ line.data }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>code</span><span class=\"token punctuation\">></span></span>\n        }\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-template</span><span class=\"token punctuation\">></span></span>\n  `</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NxDemoXStreamDefaultComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> thoughtChainCard <span class=\"token operator\">=</span> <span class=\"token function\">viewChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">'thoughtChainCard'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> read<span class=\"token operator\">:</span> TemplateRef <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">readonly</span> lines <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">signal</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">>>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">readonly</span> content <span class=\"token operator\">=</span> <span class=\"token function\">linkedSignal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    source<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lines<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">computation</span><span class=\"token operator\">:</span> lines <span class=\"token operator\">=></span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=></span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">readonly</span> items <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">computed</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>NxThoughtChainItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n      <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            title<span class=\"token operator\">:</span> <span class=\"token string\">'Mock Default Protocol - Log'</span><span class=\"token punctuation\">,</span>\n            status<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span><span class=\"token punctuation\">,</span>\n            icon<span class=\"token operator\">:</span> <span class=\"token string\">'tags'</span><span class=\"token punctuation\">,</span>\n            content<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">thoughtChainCard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">readStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fromXStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      readableStream<span class=\"token operator\">:</span> <span class=\"token function\">mockReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>chunk <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lines<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>pre <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>pre<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n","rawCode":"import { Component, computed, linkedSignal, signal, TemplateRef, viewChild } from '@angular/core';\n\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport { NzSplitterModule } from 'ng-zorro-antd/splitter';\n\nimport { NxBubbleModule } from 'ng-zorro-x/bubble';\nimport { NxThoughtChainModule, NxThoughtChainItem } from 'ng-zorro-x/thought-chain';\nimport { fromXStream } from 'ng-zorro-x/x-stream';\n\nconst contentChunks = ['He', 'llo', ', w', 'or', 'ld!'];\n\nfunction mockReadableStream(): ReadableStream {\n  const sseChunks: string[] = [];\n\n  for (let i = 0; i < contentChunks.length; i++) {\n    const sseEventPart = `event: message\\ndata: {\"id\":\"${i}\",\"content\":\"${contentChunks[i]}\"}\\n\\n`;\n    sseChunks.push(sseEventPart);\n  }\n\n  return new ReadableStream({\n    async start(controller) {\n      for (const chunk of sseChunks) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n        controller.enqueue(new TextEncoder().encode(chunk));\n      }\n      controller.close();\n    }\n  });\n}\n\n@Component({\n  selector: 'nx-demo-x-stream-default',\n  imports: [NzButtonModule, NzSplitterModule, NxBubbleModule, NxThoughtChainModule],\n  template: `\n    <nz-splitter>\n      <nz-splitter-panel>\n        <button nz-button nzType=\"primary\" (click)=\"readStream()\">Mock Default Protocol - SSE</button>\n        @if (lines().length) {\n          <br />\n          <br />\n          <nx-bubble [nxContent]=\"content()\" [nxTyping]=\"true\" />\n        }\n      </nz-splitter-panel>\n      <nz-splitter-panel>\n        <nx-thought-chain [style.margin-inline-start.px]=\"16\" [nxItems]=\"items()\" />\n      </nz-splitter-panel>\n    </nz-splitter>\n\n    <ng-template #thoughtChainCard>\n      <pre>\n        @for(line of lines(); track line) {\n          <code>{{ line.data }}</code>\n        }\n      </pre>\n    </ng-template>\n  `\n})\nexport class NxDemoXStreamDefaultComponent {\n  readonly thoughtChainCard = viewChild('thoughtChainCard', { read: TemplateRef });\n  readonly lines = signal<Array<Record<string, string>>>([]);\n  readonly content = linkedSignal({\n    source: this.lines,\n    computation: lines => lines.map(line => JSON.parse(line.data).content).join('')\n  });\n  readonly items = computed<NxThoughtChainItem[]>(() =>\n    this.lines().length\n      ? [\n          {\n            title: 'Mock Default Protocol - Log',\n            status: 'success',\n            icon: 'tags',\n            content: this.thoughtChainCard()\n          }\n        ]\n      : []\n  );\n\n  readStream(): void {\n    fromXStream({\n      readableStream: mockReadableStream()\n    }).subscribe(chunk => {\n      console.log(chunk);\n      this.lines.update(pre => [...pre, chunk]);\n    });\n  }\n}\n"}
